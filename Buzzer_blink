#define SAMPLE_RATE 128
#define BAUD_RATE 115200
#define INPUT_PIN A0

const int Threshold = 30;
float signal;  // Global signal variable

void setup() {
    // Serial connection begin
    Serial.begin(BAUD_RATE);
    pinMode(13, OUTPUT);
    pinMode(12, OUTPUT);
    digitalWrite(12, LOW);
    digitalWrite(13, LOW);
}

void loop() {
    // Calculate elapsed time
    static unsigned long past = 0;
    unsigned long present = micros();
    unsigned long interval = present - past;
    past = present;

    // Run timer
    static long timer = 0;
    timer -= interval;

    // Sample
    if (timer < 0) {
        timer += 1000000 / SAMPLE_RATE;
        float sensor_value = analogRead(INPUT_PIN);

        // Update global signal variable
        signal = EEGFilter(sensor_value);

        Serial.println(signal);
    }

    // Check threshold and control GPIO pins
    if (signal > Threshold) {
        digitalWrite(12, HIGH);  // Activate buzzer
        digitalWrite(13, LOW);  // Turn off the other pin
        delay(10);
    } else {
        digitalWrite(13, HIGH);  // Activate other indicator
        digitalWrite(12, LOW);  // Turn off the buzzer
        delay(10);
    }
}

// Band-Pass Butterworth IIR digital filter
float EEGFilter(float input) {
    float output = input;
    {
        static float z1, z2; // filter section state
        float x = output - -0.95391350 * z1 - 0.25311356 * z2;
        output = 0.00735282 * x + 0.01470564 * z1 + 0.00735282 * z2;
        z2 = z1;
        z1 = x;
    }
    {
        static float z1, z2; // filter section state
        float x = output - -1.20596630 * z1 - 0.60558332 * z2;
        output = 1.00000000 * x + 2.00000000 * z1 + 1.00000000 * z2;
        z2 = z1;
        z1 = x;
    }
    {
        static float z1, z2; // filter section state
        float x = output - -1.97690645 * z1 - 0.97706395 * z2;
        output = 1.00000000 * x + -2.00000000 * z1 + 1.00000000 * z2;
        z2 = z1;
        z1 = x;
    }
    {
        static float z1, z2; // filter section state
        float x = output - -1.99071687 * z1 - 0.99086813 * z2;
        output = 1.00000000 * x + -2.00000000 * z1 + 1.00000000 * z2;
        z2 = z1;
        z1 = x;
    }
    return output;
}



